#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–µ–º—Ç–æ–∫–µ–Ω–æ–≤
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:5000"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL Railway –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
# API_BASE_URL = "https://your-app.railway.app"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∏–º–µ—Ä –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
TEST_TOKEN = {
    "symbol": "BABU",
    "name": "First dog with residence",
    "contract_address": "yaFH5SUG6XTY2UAXSvGXfRPphNXbLjHR6QSad7Tbonk",
    "token_age": "7m",
    "views": 226,
    "market_cap": "95.1K",
    "liquidity": "36.2K",
    "sol_pooled": 86.98,
    "ath": "101.1K",
    "ath_change_percent": -16,
    "ath_time_ago": "1m",
    "volume_1m": 41985.64,
    "buy_volume_1m": 21714.81,
    "sell_volume_1m": 20270.83,
    "buys_1m": 208,
    "sells_1m": 189,
    "volume_5m": 225140.15,
    "buy_volume_5m": 118049.78,
    "sell_volume_5m": 107090.36,
    "buys_5m": 1009,
    "sells_5m": 796,
    "first_buyers": {
        "visual_map": "üåìüåöüåöüü°üü°üü°‚≠ï‚≠ï‚≠ï‚≠ï‚≠ïüü°üü°‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ïüü°‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ïüü°‚≠ïüü¢‚≠ïüîµ‚≠ï‚≠ï‚≠ï‚≠ïüü¢‚≠ïüü°‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ïüîµ‚≠ïüü°üü°‚≠ï‚≠ïüîµüü¢‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï",
        "green": 3,
        "blue": 3,
        "yellow": 10,
        "red": 51,
        "clown": 0,
        "sun": 0,
        "moon_half": 1,
        "moon_new": 2
    },
    "current_initial_ratio": {
        "current": 11.14,
        "initial": 74.58
    },
    "total_holders": 420,
    "freshies_1d_percent": 10,
    "freshies_7d_percent": 23,
    "top_10_percent": 22,
    "top_10_holdings": [19.18, 3.84, 2.9, 2.27, 2.2, 2.19, 1.97, 1.7, 1.25, 1.23],
    "dev_current_balance_percent": 0.79,
    "dev_sol_balance": 25.0321,
    "security": {
        "no_mint": True,
        "blacklist": True,
        "burnt": True,
        "dev_sold": True,
        "dex_paid": False
    }
}

def test_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üè• –¢–µ—Å—Ç–∏—Ä—É–µ–º health check...")
    try:
        response = requests.get(f"{API_BASE_URL}/")
        print(f"Status: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2)}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_single_prediction():
    """–¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    print("\nüîÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...")
    try:
        response = requests.post(
            f"{API_BASE_URL}/predict",
            json=TEST_TOKEN,
            headers={'Content-Type': 'application/json'}
        )
        print(f"Status: {response.status_code}")
        result = response.json()
        print(f"Response: {json.dumps(result, indent=2)}")
        
        if response.status_code == 200:
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
            print(f"   –°–∏–º–≤–æ–ª: {result['token_info']['symbol']}")
            print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {result['probability']:.3f}")
            print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {'–£—Å–ø–µ—à–Ω—ã–π' if result['prediction'] == 1 else '–ù–µ—É—Å–ø–µ—à–Ω—ã–π'}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result['recommendation']}")
            print(f"   –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {result['confidence_interval']}")
        
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_batch_prediction():
    """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    batch_tokens = []
    for i in range(3):
        token = TEST_TOKEN.copy()
        token['symbol'] = f"TEST{i+1}"
        token['name'] = f"Test Token {i+1}"
        token['market_cap'] = f"{(i+1)*50}K"
        batch_tokens.append(token)
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/predict/batch",
            json=batch_tokens,
            headers={'Content-Type': 'application/json'}
        )
        print(f"Status: {response.status_code}")
        result = response.json()
        
        if response.status_code == 200:
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–∫–µ—Ç–∞:")
            stats = result['batch_stats']
            print(f"   –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_tokens']}")
            print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {stats['successful_predictions']}")
            print(f"   –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {stats['average_probability']:.3f}")
            
            print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for i, res in enumerate(result['results'][:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                if 'error' not in res:
                    print(f"   {i+1}. {res['token_info']['symbol']}: {res['recommendation']} ({res['probability']:.3f})")
                else:
                    print(f"   {i+1}. –û—à–∏–±–∫–∞: {res['message']}")
        else:
            print(f"Response: {json.dumps(result, indent=2)}")
        
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_detailed_analysis():
    """–¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
    try:
        response = requests.post(
            f"{API_BASE_URL}/analyze",
            json=TEST_TOKEN,
            headers={'Content-Type': 'application/json'}
        )
        print(f"Status: {response.status_code}")
        result = response.json()
        
        if response.status_code == 200:
            print(f"\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
            print(f"   –°–∏–º–≤–æ–ª: {result['token_info']['symbol']}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result['prediction']['recommendation']}")
            
            analysis = result['detailed_analysis']
            print(f"\nüí∞ –†—ã–Ω–æ—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
            print(f"   Market Cap: {analysis['market_metrics']['market_cap']}")
            print(f"   –û—Ü–µ–Ω–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {analysis['market_metrics']['assessment']}")
            
            print(f"\n‚è∞ –ê–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞:")
            print(f"   –í–æ–∑—Ä–∞—Å—Ç: {analysis['age_analysis']['token_age']}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis['age_analysis']['category']}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {analysis['age_analysis']['risk_level']}")
            
            print(f"\nüêã –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∫–∏—Ç–æ–≤:")
            print(f"   –ì–ª–∞–≤–Ω—ã–π –∫–∏—Ç: {analysis['whale_concentration']['biggest_whale_percent']:.1f}%")
            print(f"   –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: {analysis['whale_concentration']['risk_assessment']}")
            
            print(f"\nüîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:")
            print(f"   –û–±—â–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {analysis['security_analysis']['overall_security']}")
            
            if result['risk_factors']:
                print(f"\n‚ö†Ô∏è –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:")
                for factor in result['risk_factors']:
                    print(f"   ‚Ä¢ {factor}")
            
            if result['positive_factors']:
                print(f"\n‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:")
                for factor in result['positive_factors']:
                    print(f"   ‚Ä¢ {factor}")
        else:
            print(f"Response: {json.dumps(result, indent=2)}")
        
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_feature_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    print("\nüõ†Ô∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    try:
        response = requests.post(
            f"{API_BASE_URL}/features",
            json=TEST_TOKEN,
            headers={'Content-Type': 'application/json'}
        )
        print(f"Status: {response.status_code}")
        result = response.json()
        
        if response.status_code == 200:
            print(f"\nüìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:")
            print(f"   –í—Å–µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {result['feature_count']}")
            
            categories = result['categorized_features']
            print(f"\nüìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
            for category, features in categories.items():
                print(f"   {category}: {len(features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            print(f"\nüîë –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:")
            market = categories['market_data']
            print(f"   Liquidity/MCap ratio: {market['liquidity_to_mcap_ratio']:.3f}")
            
            trading = categories['trading_metrics']
            print(f"   Buy pressure (5m): {trading['buy_pressure_5m']:.3f}")
            
            whale = categories['whale_analysis']
            print(f"   Biggest whale: {whale['biggest_whale_percent']:.1f}%")
        else:
            print(f"Response: {json.dumps(result, indent=2)}")
        
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def run_performance_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...")
    
    num_requests = 10
    start_time = time.time()
    successful_requests = 0
    
    for i in range(num_requests):
        try:
            response = requests.post(
                f"{API_BASE_URL}/predict",
                json=TEST_TOKEN,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            if response.status_code == 200:
                successful_requests += 1
            print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: {'‚úÖ' if response.status_code == 200 else '‚ùå'}")
        except Exception as e:
            print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: ‚ùå {e}")
    
    end_time = time.time()
    total_time = end_time - start_time
    avg_time = total_time / num_requests
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {num_requests}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_requests}")
    print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: {avg_time:.2f}s")
    print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {num_requests/total_time:.2f}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –ú–ï–ú–¢–û–ö–ï–ù–û–í")
    print("=" * 60)
    
    tests = [
        ("Health Check", test_health_check),
        ("Single Prediction", test_single_prediction),
        ("Batch Prediction", test_batch_prediction),
        ("Detailed Analysis", test_detailed_analysis),
        ("Feature Extraction", test_feature_extraction),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n{'='*60}")
        result = test_func()
        results.append((test_name, result))
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print(f"\n{'='*60}")
    run_performance_test()
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í")
    print("=" * 60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == len(tests):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! API –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")

if __name__ == "__main__":
    main()
